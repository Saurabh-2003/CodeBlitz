datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  Session Session[]
  Account Account?

  // Optional for WebAuthn support
  Authenticator Authenticator[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  role           Role         @default(USER)
  easySolved     Int          @default(0)
  mediumSolved   Int          @default(0)
  hardSolved     Int          @default(0)
  bio            String?
  location       String?
  collegeName    String?
  socialLinks    String?
  skills         String?
  communityStats Json?
  linkedinUrl    String?
  githubUrl      String?
  portfolioUrl   String?
  submissions    Submission[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Problem {
  id           String         @id @default(uuid()) @db.VarChar(36)
  title        String
  // description  String
  description  String         @db.MediumText
  difficulty   Difficulty
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  submissions  Submission[]
  topics       ProblemTopic[]
  hints        Hint[]
  constraints  Constraint[]
  inputs       String?
  outputs      String?
  // pythonDriver String
  pythonDriver String         @db.MediumText
  // cppDriver    String
  cppDriver    String         @db.MediumText
  // jsDriver     String
  jsDriver     String         @db.MediumText
}

// @db.Text @db.MediumText @db.LongText for storing large text

model Submission {
  id        String           @id @default(uuid()) @db.VarChar(36)
  // code      String
  language  String?
  code      String           @db.MediumText
  status    SubmissionStatus
  createdAt DateTime         @default(now())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  problemId String
  problem   Problem          @relation(fields: [problemId], references: [id])

  @@index([userId])
  @@index([problemId])
}

model Topic {
  id       String         @id @default(uuid()) @db.VarChar(36)
  name     String         @unique
  problems ProblemTopic[]
}

model Hint {
  id        String  @id @default(uuid()) @db.VarChar(36)
  name      String
  problemId String
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model Constraint {
  id        String  @id @default(uuid()) @db.VarChar(36)
  name      String
  problemId String
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

// model Input {
//   id        String  @id @default(uuid()) @db.VarChar(36)
//   name      String
//   problemId String
//   problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
// }

model ProblemTopic {
  problemId String
  topicId   String
  problem   Problem @relation(fields: [problemId], references: [id])
  topic     Topic   @relation(fields: [topicId], references: [id])

  @@id([problemId, topicId])
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum SubmissionStatus {
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILE_ERROR
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}
